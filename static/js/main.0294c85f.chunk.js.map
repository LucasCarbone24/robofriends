{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducer.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","text","target","value","playload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"kQAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACK,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,mBACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcFK,EAnBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAChB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKNC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCGXI,EAVA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,SAAU,SAASC,OAAQ,kBAAmBC,OAAQ,SAAnE,SAESJ,EAAMK,YCNVC,G,MAAsB,uBAEtBC,EAAwB,yBACxBC,EAAwB,yBACxBC,EAAuB,wBCqB9BC,E,uKAIF,WACSC,KAAKX,MAAMY,oB,oBAMpB,WAEQ,MAAwDD,KAAKX,MAAtDa,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,eAAezB,EAAnC,EAAmCA,OAAQ0B,EAA3C,EAA2CA,UACrCC,EAAiB3B,EAAO4B,QAAO,SAAAC,GACrC,OAAOA,EAAMpC,KAAKqC,cAAcC,SAASP,EAAYM,kBAEzD,OAAOJ,EAAY,oBAAI9B,UAAY,KAAhB,qBAEX,sBAAKA,UAAU,KAAf,UACI,oBAAIA,UAAW,KAAf,yBACA,cAAC,EAAD,CAAWU,aAAcmB,IACzB,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAAQ2B,a,GAvBxBK,aA6BHC,eA7CS,SAAAC,GACpB,MAAO,CACHV,YAAaU,EAAMC,aAAaX,YAChCxB,OAAQkC,EAAME,cAAcpC,OAC5B0B,UAAWQ,EAAME,cAAcV,UAC/BW,MAAOH,EAAME,cAAcC,UAIR,SAACC,GACxB,MAAO,CACHb,eAAgB,SAACc,GAAD,OAAWD,GCdJE,EDc4BD,EAAME,OAAOC,MCd/B,CACxCnC,KAAOU,EACP0B,SAAUH,KAFmB,IAACA,GDevBjB,gBAAiB,kBAAMe,GCTI,SAACA,GAChCA,EAAS,CAAE/B,KAAMW,IACjB0B,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAMA,EAASC,UAC5BF,MAAK,SAAAG,GAAI,OAAGV,EAAS,CAAC/B,KAAMY,EAAwBwB,SAAUK,OAC9DC,OAAO,SAAAZ,GAAK,OAAIC,EAAS,CAAC/B,KAAMa,EAAuBuB,SAAUN,cDqCvDJ,CAA6CZ,GE1C7C6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDRO,G,MAAoB,CACtBlC,YAAY,KAWVmC,EAAoB,CACtBjC,WAAW,EACX1B,OAAQ,GACRqC,MAAO,ICTLuB,EAASC,yBACTC,EAAcC,YAAgB,CAAC5B,aDHT,WAAyC,IAAxCD,EAAuC,uDAAjCwB,EAAmBM,EAAc,uDAAP,GACzD,OAAOA,EAAOzD,OACLU,EACMgD,OAAOC,OAAO,GAAIhC,EAAO,CAACV,YAAawC,EAAOrB,WACzCT,GCD2BE,cDWtB,WAAyC,IAAxCF,EAAuC,uDAAjCyB,EAAmBK,EAAc,uDAAP,GAC1D,OAAOA,EAAOzD,MACV,KAAKW,EACD,OAAO+C,OAAOC,OAAO,GAAGhC,EAAM,CAACR,WAAW,IAC9C,KAAKP,EACD,OAAO8C,OAAOC,OAAO,GAAGhC,EAAM,CAAClC,OAAQgE,EAAOrB,SAASjB,WAAW,IACtE,KAAKN,EACD,OAAO6C,OAAOC,OAAO,GAAGhC,EAAM,CAACG,MAAO2B,EAAOrB,SAASjB,WAAW,IACpE,QAAS,OAAOQ,MClBnBiC,EACUC,YAAYN,EAAaO,YAAgBC,IAAgBV,IAEzEW,IAASC,OAAQ,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,MACQM,SAASC,eAAe,SACpDxB,M","file":"static/js/main.0294c85f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n         <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n           <img alt='robots' src ={`https://robohash.org/${id}?size=250x250`}/>\r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n           </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n      <div>\r\n        {\r\n          robots.map((user, i) => {\r\n            return (\r\n              <Card\r\n                key={i}\r\n                id={robots[i].id}\r\n                name={robots[i].name}\r\n                email={robots[i].email}\r\n                />\r\n            );\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='Search Robots'\r\n                onChange={searchChange}\r\n            /> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll',border: '1px solid black', height: '800px'}}>\r\n            {\r\n                 props.children\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';","import React, {Component} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList  from \"../components/CardList\";\r\nimport Searchbox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll.js'\r\nimport '../containers/App.css'\r\n\r\nimport{requestRobots, setSearchfield} from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }    \r\n}\r\n\r\nclass App extends Component  {\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n             this.props.onRequestRobots();\r\n        \r\n    }\r\n\r\n   \r\n\r\n    render() {\r\n\r\n            const {searchField, onSearchChange,robots, isPending} = this.props;\r\n            const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ? <h1 className = 'tc'>Loading</h1>:\r\n        (\r\n                <div className='tc'>\r\n                    <h1 className ='f2'>RoboFriends</h1>\r\n                    <Searchbox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/> \r\n                    </Scroll>\r\n                </div> \r\n            );\r\n        }\r\n    }\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n        CHANGE_SEARCH_FIELD, \r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED} from \"./constants\"\r\n\r\nexport const setSearchfield = (text) => ({\r\n type:  CHANGE_SEARCH_FIELD,\r\n playload: text  \r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response =>   response.json())\r\n    .then(data=> dispatch({type: REQUEST_ROBOTS_SUCCESS, playload: data}))\r\n    .catch( error => dispatch({type: REQUEST_ROBOTS_FAILED, playload: error}))\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { \r\n    CHANGE_SEARCH_FIELD, \r\n     REQUEST_ROBOTS_PENDING,\r\n     REQUEST_ROBOTS_SUCCESS,\r\n     REQUEST_ROBOTS_FAILED} from \"./constants\"\r\n\r\nconst intialStateSearch = {\r\n    searchField:''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:  \r\n            return Object.assign({}, state, {searchField: action.playload});\r\n        default: return state;\r\n        }\r\n} \r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots: action.playload,isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error: action.playload,isPending: false});\r\n         default: return state;\r\n     }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider, Connect } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport thunkMiddleware  from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots  } from './reducer';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = \r\n                createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\r\n\r\nReactDOM.render( <Provider store={store}>\r\n                     <App/> \r\n                </Provider>, document.getElementById('root'));\r\n reportWebVitals();\r\n "],"sourceRoot":""}