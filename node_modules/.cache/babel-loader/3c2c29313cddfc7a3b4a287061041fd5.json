{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants\";\nexport const setSearchfield = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  playload: text\n});\nexport const requestRobots = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    playload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    playload: error\n  }));\n};","map":{"version":3,"sources":["C:/Users/Lucas/Desktop/robofriends/src/actions.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchfield","text","type","playload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACQA,mBADR,EAESC,sBAFT,EAGSC,sBAHT,EAISC,qBAJT,QAIqC,aAJrC;AAMA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACxCC,EAAAA,IAAI,EAAGN,mBADiC;AAExCO,EAAAA,QAAQ,EAAEF;AAF8B,CAAX,CAAvB;AAMP,OAAO,MAAMG,aAAa,GAAIC,QAAD,IAAc;AACvCA,EAAAA,QAAQ,CAAC;AAAEH,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAMA,QAAQ,CAACC,IAAT,EADpB,EAECF,IAFD,CAEMG,IAAI,IAAGL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,IAAAA,QAAQ,EAAEO;AAAzC,GAAD,CAFrB,EAGCC,KAHD,CAGQC,KAAK,IAAIP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEH,qBAAP;AAA8BI,IAAAA,QAAQ,EAAES;AAAxC,GAAD,CAHzB;AAIH,CANM","sourcesContent":["import { \r\n        CHANGE_SEARCH_FIELD, \r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED} from \"./constants\"\r\n\r\nexport const setSearchfield = (text) => ({\r\n type:  CHANGE_SEARCH_FIELD,\r\n playload: text  \r\n})\r\n\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response =>   response.json())\r\n    .then(data=> dispatch({type: REQUEST_ROBOTS_SUCCESS, playload: data}))\r\n    .catch( error => dispatch({type: REQUEST_ROBOTS_FAILED, playload: error}))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}